# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Executable Book Project
# This file is distributed under the same license as the MyST-NB package.
# xinetzone <xinzone@outlook.com>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MyST-NB \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-24 10:56+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../reference/contributing.md:1
msgid "Contribute to MyST-NB"
msgstr ""

#: ../../reference/contributing.md:3
msgid ""
"[![Github-CI][github-ci]][github-link] [![Coverage Status][codecov-badge"
"]][codecov-link] [![Documentation Status][rtd-badge]][rtd-link] [![Code "
"style: black][black-badge]][black-link]"
msgstr ""

#: ../../reference/contributing.md:3
msgid "Github-CI"
msgstr ""

#: ../../reference/contributing.md:3
msgid "Coverage Status"
msgstr ""

#: ../../reference/contributing.md:3
msgid "Documentation Status"
msgstr ""

#: ../../reference/contributing.md:3
msgid "Code style: black"
msgstr ""

#: ../../reference/contributing.md:8
msgid ""
"We welcome all contributions! See the [EBP Contributing "
"Guide](https://executablebooks.org/en/latest/contributing.html) for "
"general details, and below for guidance specific to MyST-NB."
msgstr ""

#: ../../reference/contributing.md:11
msgid "Installation"
msgstr ""

#: ../../reference/contributing.md:13
msgid ""
"To install `MyST-NB` for package development (you will need a recent "
"version of pip (>=22.0)):"
msgstr ""

#: ../../reference/contributing.md:22
msgid "How the Jupyter Notebook parser works"
msgstr ""

#: ../../reference/contributing.md:24
msgid ""
"MyST-NB is built on top of the MyST markdown parser. This is a flavor of "
"markdown designed to work with the Sphinx ecosystem. It is a combination "
"of CommonMark markdown, with a few extra syntax pieces added for use in "
"Sphinx (for example, roles and directives)."
msgstr ""

#: ../../reference/contributing.md:29
msgid "MyST-NB will do the following:"
msgstr ""

#: ../../reference/contributing.md:31
msgid ""
"Check for any pages in your documentation folder that end in `.ipynb`. "
"For each one:"
msgstr ""

#: ../../reference/contributing.md:32
msgid ""
"Loop through the notebook's cells, converting cell contents into the "
"Sphinx AST."
msgstr ""

#: ../../reference/contributing.md:33
msgid ""
"If it finds executable code cells, include their outputs in-line with the"
" code."
msgstr ""

#: ../../reference/contributing.md:34
msgid ""
"If it finds markdown cells, use the MyST parser to convert them into "
"Sphinx."
msgstr ""

#: ../../reference/contributing.md:36
msgid ""
"Eventually, it will also provide support for writing pure-markdown "
"versions of notebooks that can be executed and read into Sphinx."
msgstr ""

#: ../../reference/contributing.md:39
msgid "Code Style"
msgstr ""

#: ../../reference/contributing.md:41
msgid ""
"Code style is tested using [flake8](http://flake8.pycqa.org), with the "
"configuration set in `.flake8`, and code formatted with "
"[black](https://github.com/ambv/black)."
msgstr ""

#: ../../reference/contributing.md:45
msgid ""
"Installing with `myst-nb[code_style]` makes the [pre-commit](https://pre-"
"commit.com/) package available, which will ensure this style is met "
"before commits are submitted, by reformatting the code and testing for "
"lint errors. It can be setup by:"
msgstr ""

#: ../../reference/contributing.md:55
msgid "Optionally you can run `black` and `flake8` separately:"
msgstr ""

#: ../../reference/contributing.md:62
msgid ""
"Editors like VS Code also have automatic code reformat utilities, which "
"can adhere to this standard."
msgstr ""

#: ../../reference/contributing.md:64
msgid ""
"All functions and class methods should be annotated with types and "
"include a docstring. The prefered docstring format is outlined in `MyST-"
"NB/docstring.fmt.mustache` and can be used automatically with the "
"[autodocstring](https://marketplace.visualstudio.com/items?itemName=njpwerner.autodocstring)"
" VS Code extension."
msgstr ""

#: ../../reference/contributing.md:67
msgid "Testing"
msgstr ""

#: ../../reference/contributing.md:69
msgid "For code tests, MyST-NB uses [pytest](https://docs.pytest.org)):"
msgstr ""

#: ../../reference/contributing.md:76
msgid ""
"You can also use [tox](https://tox.readthedocs.io), to run the tests in "
"multiple isolated environments (see the `tox.ini` file for available test"
" environments):"
msgstr ""

#: ../../reference/contributing.md:83
msgid "For documentation build tests:"
msgstr ""

#: ../../reference/contributing.md:90
msgid "or"
msgstr ""

#: ../../reference/contributing.md:98
msgid "Unit Testing"
msgstr ""

#: ../../reference/contributing.md:100
msgid ""
"Testing is one of the most important aspects of your PR. You should write"
" test cases and verify your implementation by following the testing guide"
" above. If you modify code related to existing unit tests, you must run "
"appropriate commands and confirm that the tests still pass."
msgstr ""

#: ../../reference/contributing.md:102
msgid ""
"Note that we are using [pytest](https://docs.pytest.org/en/latest/) for "
"testing, [pytest-regression](https://pytest-"
"regressions.readthedocs.io/en/latest/) to self-generate/re-generate "
"expected outcomes of test and [pytest-cov](https://pytest-"
"cov.readthedocs.io/en/latest/) for checking coverage."
msgstr ""

#: ../../reference/contributing.md:104
msgid "To run tests along with coverage:"
msgstr ""

#: ../../reference/contributing.md:110
msgid "To run tests along with generation of an html coverage report:"
msgstr ""

#: ../../reference/contributing.md:117
msgid "Test File and Directory Naming Conventions"
msgstr ""

#: ../../reference/contributing.md:119
msgid ""
"Tests are found in the [tests](https://github.com/executablebooks/MyST-"
"NB/tree/master/tests) directory. In order for `pytest` to find the test "
"scripts correctly, the name of each test script should start with `test_`"
" prefix."
msgstr ""

#: ../../reference/contributing.md:121
msgid "How to Write Tests"
msgstr ""

#: ../../reference/contributing.md:123
msgid ""
"There are many examples of unit tests under the "
"[tests](https://github.com/executablebooks/MyST-NB/tree/master/tests) "
"directory, so reading some of them is a good and recommended way. Prefer "
"using the `fixtures` and the classes defined in "
"[conftest.py](https://github.com/executablebooks/MyST-"
"NB/blob/master/tests/conftest.py) as much as possible."
msgstr ""

#: ../../reference/contributing.md:125
msgid ""
"If using [pytest-regression](https://pytest-"
"regressions.readthedocs.io/en/latest/), a new directory with `test_` "
"prefix is expected to be created in the first test run. This will store "
"your expected output against which subsequent test outputs will be "
"compared."
msgstr ""

#: ../../reference/contributing.md:127
msgid "Code Coverage report"
msgstr ""

#: ../../reference/contributing.md:129
msgid ""
"[pytest-cov](https://pytest-cov.readthedocs.io/en/latest/) is used to "
"generate code coverage report. Make sure that your test cases cover most "
"of the code written by you."
msgstr ""

