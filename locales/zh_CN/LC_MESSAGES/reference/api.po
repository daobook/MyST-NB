# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Executable Book Project
# This file is distributed under the same license as the MyST-NB package.
# xinetzone <xinzone@outlook.com>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MyST-NB \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-24 10:56+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../reference/api.rst:4
msgid "Python API"
msgstr ""

#: ../../reference/api.rst:6
msgid ""
"The parsing of a notebook consists of a number of stages, with each stage"
" separated into a separate module:"
msgstr ""

#: ../../reference/api.rst:8
msgid "The configuration is set (from a file or CLI)"
msgstr ""

#: ../../reference/api.rst:9
msgid "The parser is called with an input string and source"
msgstr ""

#: ../../reference/api.rst:10
msgid "The parser reads the input string to a notebook node"
msgstr ""

#: ../../reference/api.rst:11
msgid "The notebook is converted to a Markdown-It tokens syntax tree"
msgstr ""

#: ../../reference/api.rst:12
msgid ""
"The notebook code outputs are potentially updated, via execution or from "
"a cache"
msgstr ""

#: ../../reference/api.rst:13
msgid ""
"The syntax tree is transformed to a docutils document AST (calling the "
"renderer plugin)"
msgstr ""

#: ../../reference/api.rst:14
msgid ""
"The docutils document is processed by docutils/sphinx, to create the "
"desired output format(s)"
msgstr ""

#: ../../reference/api.rst:17
msgid "Configuration"
msgstr ""

#: myst_nb.core.config.NbParserConfig:1 of
msgid "Global configuration options for the MyST-NB parser."
msgstr ""

#: myst_nb.core.config.NbParserConfig:3 of
msgid ""
"Note: in the docutils/sphinx configuration, these option names are "
"prepended with ``nb_``"
msgstr ""

#: myst_nb.core.config.NbParserConfig.as_triple:1 of
msgid "Yield triples of (name, value, field)."
msgstr ""

#: myst_nb.core.config.NbParserConfig.copy:1 of
msgid "Return a copy of the configuration with optional changes applied."
msgstr ""

#: myst_nb.core.config.NbParserConfig.get_cell_level_config:1 of
msgid "Get a configuration value at the cell level."
msgstr ""

#: myst_nb.core.config.NbParserConfig.get_cell_level_config:3 of
msgid ""
"Takes the highest priority configuration from: `cell > document > global "
"> default`"
msgstr ""

#: myst_nb.core.config.NbParserConfig.get_cell_level_config
#: myst_nb.core.execute.base.NotebookClientBase.eval_variable
#: myst_nb.core.execute.create_client myst_nb.core.read.create_nb_reader
#: myst_nb.core.read.is_myst_markdown_notebook
#: myst_nb.core.read.read_myst_markdown_notebook
#: myst_nb.core.render.NbElementRenderer.add_js_file
#: myst_nb.core.render.NbElementRenderer.render_error
#: myst_nb.core.render.NbElementRenderer.render_raw_cell
#: myst_nb.core.render.NbElementRenderer.render_stderr
#: myst_nb.core.render.NbElementRenderer.render_stdout
#: myst_nb.core.render.NbElementRenderer.write_file
#: myst_nb.docutils_.Parser.parse myst_nb.sphinx_.Parser.parse of
msgid "参数"
msgstr ""

#: myst_nb.core.config.NbParserConfig.get_cell_level_config:6 of
msgid "the field name to get the value for"
msgstr ""

#: myst_nb.core.config.NbParserConfig.get_cell_level_config:7 of
msgid "the metadata for the cell"
msgstr ""

#: myst_nb.core.config.NbParserConfig.get_cell_level_config:8 of
msgid "a callback to use to warn about issues (msg, subtype)"
msgstr ""

#: myst_nb.core.config.NbParserConfig.get_cell_level_config
#: myst_nb.core.execute.base.NotebookClientBase.code_cell_outputs
#: myst_nb.core.execute.base.NotebookClientBase.eval_variable of
msgid "引发"
msgstr ""

#: myst_nb.core.config.NbParserConfig.get_cell_level_config:10 of
msgid "if the field is not found"
msgstr ""

#: ../../reference/api.rst:23
msgid "Parsers"
msgstr ""

#: myst_nb.docutils_.Parser:1 of
msgid "Docutils parser for Jupyter Notebooks, containing MyST Markdown."
msgstr ""

#: myst_nb.docutils_.Parser.parse:1 myst_nb.sphinx_.Parser.parse:1 of
msgid "Parse source text."
msgstr ""

#: myst_nb.docutils_.Parser.parse:3 myst_nb.sphinx_.Parser.parse:3 of
msgid "The source string to parse"
msgstr ""

#: myst_nb.docutils_.Parser.parse:4 myst_nb.sphinx_.Parser.parse:4 of
msgid "The root docutils node to add AST elements to"
msgstr ""

#: ../../../docstring myst_nb.docutils_.Parser.settings_spec:1 of
msgid "Runtime settings specification."
msgstr ""

#: ../../../docstring myst_nb.docutils_.Parser.supported:1 of
msgid "Aliases this parser supports."
msgstr ""

#: myst_nb.sphinx_.Parser:1 of
msgid "Sphinx parser for Jupyter Notebook formats, containing MyST Markdown."
msgstr ""

#: ../../reference/api.rst:32
msgid "Read"
msgstr ""

#: myst_nb.core.read.NbReader:1 of
msgid "A data class for reading a notebook format."
msgstr ""

#: ../../../docstring myst_nb.core.read.NbReader.md_config:1 of
msgid "The configuration for parsing markdown cells."
msgstr ""

#: ../../../docstring myst_nb.core.read.NbReader.read:1 of
msgid "The function to read a notebook from a (utf8) string."
msgstr ""

#: ../../../docstring myst_nb.core.read.NbReader.read_fmt:1 of
msgid "The type of the reader, if known."
msgstr ""

#: myst_nb.core.read.create_nb_reader:1 of
msgid "Create a notebook reader, given a string, source path and configuration."
msgstr ""

#: myst_nb.core.read.create_nb_reader:3 of
msgid ""
"Note, we do not directly parse to a notebook, since jupyter-cache "
"functionality requires the reader."
msgstr ""

#: myst_nb.core.read.create_nb_reader:6 of
msgid "Path to the input source being processed."
msgstr ""

#: myst_nb.core.read.create_nb_reader:7 of
msgid "The  configuration for parsing Notebooks."
msgstr ""

#: myst_nb.core.read.create_nb_reader:8 of
msgid "The default configuration for parsing Markown."
msgstr ""

#: myst_nb.core.read.create_nb_reader:9 of
msgid "The input string (optionally used to check for text-based notebooks)"
msgstr ""

#: myst_nb.core.execute.base.NotebookClientBase.code_cell_outputs
#: myst_nb.core.execute.base.NotebookClientBase.eval_variable
#: myst_nb.core.execute.create_client myst_nb.core.read.create_nb_reader
#: myst_nb.core.read.is_myst_markdown_notebook
#: myst_nb.core.render.NbElementRenderer.write_file of
msgid "返回"
msgstr ""

#: myst_nb.core.read.create_nb_reader:11 of
msgid ""
"the notebook reader, and the (potentially modified) MdParserConfig, or "
"None if the input cannot be read as a notebook."
msgstr ""

#: myst_nb.core.read.is_myst_markdown_notebook:1 of
msgid "Check if the input is a MyST Markdown notebook."
msgstr ""

#: myst_nb.core.read.is_myst_markdown_notebook:3 of
msgid ""
"This is identified by the presence of a top-matter section, containing "
"either::"
msgstr ""

#: myst_nb.core.read.is_myst_markdown_notebook:9 of
msgid "or::"
msgstr ""

#: myst_nb.core.read.is_myst_markdown_notebook:17 of
msgid "The input text."
msgstr ""

#: myst_nb.core.read.is_myst_markdown_notebook:18 of
msgid "True if the input is a markdown notebook."
msgstr ""

#: myst_nb.core.read.read_myst_markdown_notebook:1 of
msgid "Convert text written in the myst format to a notebook."
msgstr ""

#: myst_nb.core.read.read_myst_markdown_notebook:3 of
msgid "the file text"
msgstr ""

#: myst_nb.core.read.read_myst_markdown_notebook:4 of
msgid "the name of the directive to search for containing code cells"
msgstr ""

#: myst_nb.core.read.read_myst_markdown_notebook:5 of
msgid "the name of the directive to search for containing raw cells"
msgstr ""

#: myst_nb.core.read.read_myst_markdown_notebook:6 of
msgid ""
"add a `source_map` key to the notebook metadata, which is a list of the "
"starting source line number for each cell."
msgstr ""

#: myst_nb.core.read.read_myst_markdown_notebook:8 of
msgid "path to notebook (required for :load:)"
msgstr ""

#: myst_nb.core.read.read_myst_markdown_notebook:10 of
msgid ""
":raises MystMetadataParsingError if the metadata block is not valid "
"JSON/YAML"
msgstr ""

#: myst_nb.core.read.read_myst_markdown_notebook:12 of
msgid ""
"NOTE: we assume here that all of these directives are at the top-level, "
"i.e. not nested in other directives."
msgstr ""

#: ../../reference/api.rst:44
msgid "Execute"
msgstr ""

#: myst_nb.core.execute.create_client:1 of
msgid "Create a notebook execution client, to update its outputs."
msgstr ""

#: myst_nb.core.execute.create_client:3 of
msgid ""
"This function may execute the notebook if necessary, to update its "
"outputs, or populate from a cache."
msgstr ""

#: myst_nb.core.execute.create_client:6 of
msgid "The notebook to update."
msgstr ""

#: myst_nb.core.execute.create_client:7 of
msgid "Path to or description of the input source being processed."
msgstr ""

#: myst_nb.core.execute.create_client:8 of
msgid "The configuration for the notebook parser."
msgstr ""

#: myst_nb.core.execute.create_client:9 of
msgid "The logger to use."
msgstr ""

#: myst_nb.core.execute.create_client:10 of
msgid "The format of the input source (to parse to jupyter cache)"
msgstr ""

#: myst_nb.core.execute.create_client:12 of
msgid "The updated notebook, and the (optional) execution metadata."
msgstr ""

#: myst_nb.core.execute.base.NotebookClientBase:1 of
msgid "A base client for interacting with Jupyter notebooks."
msgstr ""

#: myst_nb.core.execute.base.NotebookClientBase:3 of
msgid ""
"This class is intended to be used as a context manager, and should only "
"be entered once."
msgstr ""

#: myst_nb.core.execute.base.NotebookClientBase:6 of
msgid "Subclasses should override the `start_client` and `close_client` methods."
msgstr ""

#: myst_nb.core.execute.base.NotebookClientBase.cell_line:1 of
msgid "Get the source line number of a cell."
msgstr ""

#: myst_nb.core.execute.base.NotebookClientBase.close_client:1 of
msgid "Close the client."
msgstr ""

#: myst_nb.core.execute.base.NotebookClientBase.code_cell_outputs:1 of
msgid "Get the outputs of a cell."
msgstr ""

#: myst_nb.core.execute.base.NotebookClientBase.code_cell_outputs:3 of
msgid "a tuple of the execution_count and the outputs"
msgstr ""

#: myst_nb.core.execute.base.NotebookClientBase.code_cell_outputs:4 of
msgid "if the cell index is out of range"
msgstr ""

#: myst_nb.core.execute.base.NotebookClientBase.eval_variable:1 of
msgid "Retrieve the value of a variable from the kernel."
msgstr ""

#: myst_nb.core.execute.base.NotebookClientBase.eval_variable:3 of
msgid "the name of the variable, must match the regex `[a-zA-Z][a-zA-Z0-9_]*`"
msgstr ""

#: myst_nb.core.execute.base.NotebookClientBase.eval_variable:6 of
msgid "a code cell output"
msgstr ""

#: myst_nb.core.execute.base.NotebookClientBase.eval_variable:7 of
msgid "if the execution mode does not support this feature"
msgstr ""

#: myst_nb.core.execute.base.NotebookClientBase.eval_variable:8 of
msgid "if the variable name is invalid"
msgstr ""

#: myst_nb.core.execute.base.NotebookClientBase.exec_metadata:1 of
msgid "Get the execution metadata."
msgstr ""

#: myst_nb.core.execute.base.NotebookClientBase.finalise_client:1 of
msgid "Finalise the client."
msgstr ""

#: myst_nb.core.execute.base.NotebookClientBase.finalise_client:3 of
msgid ""
"This is called before final rendering and should be used, for example, to"
" finalise the widget state on the metadata."
msgstr ""

#: myst_nb.core.execute.base.NotebookClientBase.glue_data:1 of
msgid "Get the glue data."
msgstr ""

#: myst_nb.core.execute.base.NotebookClientBase.logger:1 of
msgid "Get the logger."
msgstr ""

#: myst_nb.core.execute.base.NotebookClientBase.nb_config:1 of
msgid "Get the notebook configuration."
msgstr ""

#: myst_nb.core.execute.base.NotebookClientBase.nb_metadata:1 of
msgid "Get the notebook level metadata."
msgstr ""

#: myst_nb.core.execute.base.NotebookClientBase.nb_source_code_lexer:1 of
msgid "Get the lexer for the notebook source code."
msgstr ""

#: myst_nb.core.execute.base.NotebookClientBase.notebook:1 of
msgid "Get the notebook."
msgstr ""

#: myst_nb.core.execute.base.NotebookClientBase.path:1 of
msgid "Get the notebook path."
msgstr ""

#: myst_nb.core.execute.base.NotebookClientBase.start_client:1 of
msgid "Start the client."
msgstr ""

#: myst_nb.core.execute.direct.NotebookClientDirect:1 of
msgid ""
"A notebook client that executes the notebook directly, on entrance of the"
" context."
msgstr ""

#: myst_nb.core.execute.cache.NotebookClientCache:1 of
msgid ""
"A notebook client that retrieves notebook outputs from the cache, or "
"executes the notebook and adds them to the cache, on entrance of the "
"context."
msgstr ""

#: myst_nb.core.execute.inline.NotebookClientInline:1 of
msgid ""
"A notebook client that executes the notebook inline, i.e. during the "
"render."
msgstr ""

#: myst_nb.core.execute.inline.NotebookClientInline:4 of
msgid ""
"This allows for the client to be called in-between code cell executions, "
"in order to extract variable state."
msgstr ""

#: myst_nb.core.execute.base.ExecutionError:1 of
msgid "An exception for failed execution and `execution_raise_on_error` is true."
msgstr ""

#: myst_nb.core.execute.base.EvalNameError:1 of
msgid "An exception for if an evaluation variable name is invalid."
msgstr ""

#: myst_nb.core.execute.base.ExecutionResult:1 of
msgid "Result of executing a notebook."
msgstr ""

#: ../../../docstring myst_nb.core.execute.base.ExecutionResult.error:1 of
msgid "error type if the notebook failed to execute"
msgstr ""

#: ../../../docstring myst_nb.core.execute.base.ExecutionResult.method:1 of
msgid "method used to execute the notebook"
msgstr ""

#: ../../../docstring myst_nb.core.execute.base.ExecutionResult.mtime:1 of
msgid "POSIX timestamp of the execution time"
msgstr ""

#: ../../../docstring myst_nb.core.execute.base.ExecutionResult.runtime:1 of
msgid "runtime in seconds"
msgstr ""

#: ../../../docstring myst_nb.core.execute.base.ExecutionResult.succeeded:1 of
msgid "True if the notebook executed successfully"
msgstr ""

#: ../../../docstring myst_nb.core.execute.base.ExecutionResult.traceback:1 of
msgid "traceback if the notebook failed"
msgstr ""

#: ../../reference/api.rst:65
msgid "Render plugin"
msgstr ""

#: myst_nb.core.render.MimeData:1 of
msgid "Mime data from an execution output (display_data / execute_result)"
msgstr ""

#: myst_nb.core.render.MimeData:3 of
msgid "e.g. notebook.cells[0].outputs[0].data['text/plain'] = \"Hello, world!\""
msgstr ""

#: myst_nb.core.render.MimeData:5 of
msgid ""
"see: https://nbformat.readthedocs.io/en/5.1.3/format_description.html"
"#display-data"
msgstr ""

#: ../../../docstring myst_nb.core.render.MimeData.cell_index:1 of
msgid "Index of the cell in the notebook"
msgstr ""

#: ../../../docstring myst_nb.core.render.MimeData.cell_metadata:1 of
msgid "Cell level metadata of the output"
msgstr ""

#: ../../../docstring myst_nb.core.render.MimeData.content:1 of
msgid "Data value of the output.data"
msgstr ""

#: ../../../docstring myst_nb.core.render.MimeData.line:1 of
msgid "Source line of the cell"
msgstr ""

#: ../../../docstring myst_nb.core.render.MimeData.md_headings:1 of
msgid "Whether to render headings in text/markdown blocks."
msgstr ""

#: ../../../docstring myst_nb.core.render.MimeData.mime_type:1 of
msgid "Mime type key of the output.data"
msgstr ""

#: ../../../docstring myst_nb.core.render.MimeData.output_index:1 of
msgid "Index of the output in the cell"
msgstr ""

#: ../../../docstring myst_nb.core.render.MimeData.output_metadata:1 of
msgid "Output level metadata of the output"
msgstr ""

#: myst_nb.core.render.MimeData.string:1 of
msgid "Get the content as a string."
msgstr ""

#: myst_nb.core.render.NbElementRenderer:1 of
msgid "A class for rendering notebook elements."
msgstr ""

#: myst_nb.core.render.NbElementRenderer.add_js_file:1 of
msgid "Register a JavaScript file to include in the HTML output of this document."
msgstr ""

#: myst_nb.core.render.NbElementRenderer.add_js_file:3 of
msgid "the key to use for referencing the file"
msgstr ""

#: myst_nb.core.render.NbElementRenderer.add_js_file:4 of
msgid ""
"the URI to the file, or None and supply the file contents in "
"kwargs['body']"
msgstr ""

#: myst_nb.core.render.NbElementRenderer.config:1 of
msgid "The notebook parser config"
msgstr ""

#: myst_nb.core.render.NbElementRenderer.logger:1 of
msgid "The logger for this renderer."
msgstr ""

#: myst_nb.core.render.NbElementRenderer.logger:3 of
msgid ""
"In extension to a standard logger, this logger also for `line` and "
"`subtype` kwargs to the `log` methods."
msgstr ""

#: myst_nb.core.render.NbElementRenderer.render_error:1 of
msgid "Render a notebook error output."
msgstr ""

#: myst_nb.core.render.NbElementRenderer.render_error:3 of
msgid "https://nbformat.readthedocs.io/en/5.1.3/format_description.html#error"
msgstr ""

#: myst_nb.core.render.NbElementRenderer.render_error:5
#: myst_nb.core.render.NbElementRenderer.render_stderr:5
#: myst_nb.core.render.NbElementRenderer.render_stdout:5 of
msgid "the output node"
msgstr ""

#: myst_nb.core.render.NbElementRenderer.render_error:6
#: myst_nb.core.render.NbElementRenderer.render_raw_cell:6
#: myst_nb.core.render.NbElementRenderer.render_stderr:6
#: myst_nb.core.render.NbElementRenderer.render_stdout:6 of
msgid "the cell level metadata"
msgstr ""

#: myst_nb.core.render.NbElementRenderer.render_error:7
#: myst_nb.core.render.NbElementRenderer.render_stderr:7
#: myst_nb.core.render.NbElementRenderer.render_stdout:7 of
msgid "the index of the cell containing the output"
msgstr ""

#: myst_nb.core.render.NbElementRenderer.render_error:8
#: myst_nb.core.render.NbElementRenderer.render_raw_cell:8
#: myst_nb.core.render.NbElementRenderer.render_stderr:8
#: myst_nb.core.render.NbElementRenderer.render_stdout:8 of
msgid "the line number of the cell in the source document"
msgstr ""

#: myst_nb.core.render.NbElementRenderer.render_image:1
#: myst_nb.core.render.NbElementRenderer.render_image_inline:1 of
msgid "Render a notebook image mime data output."
msgstr ""

#: myst_nb.core.render.NbElementRenderer.render_javascript:1
#: myst_nb.core.render.NbElementRenderer.render_javascript_inline:1 of
msgid "Render a notebook application/javascript mime data output."
msgstr ""

#: myst_nb.core.render.NbElementRenderer.render_markdown:1
#: myst_nb.core.render.NbElementRenderer.render_markdown_inline:1 of
msgid "Render a notebook text/markdown mime data output."
msgstr ""

#: myst_nb.core.render.NbElementRenderer.render_mime_type:1 of
msgid "Render a notebook mime output, as a block level element."
msgstr ""

#: myst_nb.core.render.NbElementRenderer.render_mime_type_inline:1 of
msgid "Render a notebook mime output, as an inline level element."
msgstr ""

#: myst_nb.core.render.NbElementRenderer.render_nb_finalise:1 of
msgid "Finalise the render of the notebook metadata."
msgstr ""

#: myst_nb.core.render.NbElementRenderer.render_raw_cell:1 of
msgid "Render a raw cell."
msgstr ""

#: myst_nb.core.render.NbElementRenderer.render_raw_cell:3 of
msgid ""
"https://nbformat.readthedocs.io/en/5.1.3/format_description.html#raw-"
"nbconvert-cells"
msgstr ""

#: myst_nb.core.render.NbElementRenderer.render_raw_cell:5 of
msgid "the raw cell content"
msgstr ""

#: myst_nb.core.render.NbElementRenderer.render_raw_cell:7 of
msgid "the index of the cell"
msgstr ""

#: myst_nb.core.render.NbElementRenderer.render_stderr:1 of
msgid "Render a notebook stderr output."
msgstr ""

#: myst_nb.core.render.NbElementRenderer.render_stderr:3
#: myst_nb.core.render.NbElementRenderer.render_stdout:3 of
msgid ""
"https://nbformat.readthedocs.io/en/5.1.3/format_description.html#stream-"
"output"
msgstr ""

#: myst_nb.core.render.NbElementRenderer.render_stdout:1 of
msgid "Render a notebook stdout output."
msgstr ""

#: myst_nb.core.render.NbElementRenderer.render_text_html:1
#: myst_nb.core.render.NbElementRenderer.render_text_html_inline:1 of
msgid "Render a notebook text/html mime data output."
msgstr ""

#: myst_nb.core.render.NbElementRenderer.render_text_latex:1
#: myst_nb.core.render.NbElementRenderer.render_text_latex_inline:1 of
msgid "Render a notebook text/latex mime data output."
msgstr ""

#: myst_nb.core.render.NbElementRenderer.render_text_plain:1
#: myst_nb.core.render.NbElementRenderer.render_text_plain_inline:1 of
msgid "Render a notebook text/plain mime data output."
msgstr ""

#: myst_nb.core.render.NbElementRenderer.render_unhandled:1
#: myst_nb.core.render.NbElementRenderer.render_unhandled_inline:1 of
msgid "Render a notebook output of unknown mime type."
msgstr ""

#: myst_nb.core.render.NbElementRenderer.render_widget_view:1
#: myst_nb.core.render.NbElementRenderer.render_widget_view_inline:1 of
msgid "Render a notebook application/vnd.jupyter.widget-view+json mime output."
msgstr ""

#: myst_nb.core.render.NbElementRenderer.renderer:1 of
msgid "The renderer this output renderer is associated with."
msgstr ""

#: myst_nb.core.render.NbElementRenderer.source:1 of
msgid "The source of the notebook."
msgstr ""

#: myst_nb.core.render.NbElementRenderer.write_file:1 of
msgid "Write a file to the external output folder."
msgstr ""

#: myst_nb.core.render.NbElementRenderer.write_file:3 of
msgid "the path to write the file to, relative to the output folder"
msgstr ""

#: myst_nb.core.render.NbElementRenderer.write_file:4 of
msgid "the content to write to the file"
msgstr ""

#: myst_nb.core.render.NbElementRenderer.write_file:5 of
msgid "whether to overwrite an existing file"
msgstr ""

#: myst_nb.core.render.NbElementRenderer.write_file:6 of
msgid "whether to ignore an existing file if overwrite is False"
msgstr ""

#: myst_nb.core.render.NbElementRenderer.write_file:8 of
msgid "URI to use for referencing the file"
msgstr ""

#: myst_nb.core.render.MimeRenderPlugin:1 of
msgid "Protocol for a mime renderer plugin."
msgstr ""

#: myst_nb.core.render.ExampleMimeRenderPlugin.handle_mime:1
#: myst_nb.core.render.MimeRenderPlugin.handle_mime:1 of
msgid ""
"A function that renders a mime type to docutils nodes, or returns None to"
" reject."
msgstr ""

#: ../../../docstring
#: myst_nb.core.render.ExampleMimeRenderPlugin.mime_priority_overrides:1
#: myst_nb.core.render.MimeRenderPlugin.mime_priority_overrides:1 of
msgid "A list of (builder name, mime type, priority)."
msgstr ""

#: myst_nb.core.render.ExampleMimeRenderPlugin:1 of
msgid "Example mime renderer for `custommimetype`."
msgstr ""

#: ../../reference/api.rst:82
msgid "Lexers"
msgstr ""

#: myst_nb.core.lexers.AnsiColorLexer:1 of
msgid "基类：:py:class:`pygments.lexer.RegexLexer`"
msgstr ""

#: myst_nb.core.lexers.AnsiColorLexer:1 of
msgid "Pygments lexer for text containing ANSI color codes."
msgstr ""

#: myst_nb.core.lexers.AnsiColorLexer:3 of
msgid "Adapted from https://github.com/chriskuehl/pygments-ansi-color"
msgstr ""

#: ../../../docstring myst_nb.core.lexers.AnsiColorLexer.aliases:1 of
msgid "Shortcuts for the lexer"
msgstr ""

#: ../../../docstring myst_nb.core.lexers.AnsiColorLexer.flags:1 of
msgid "Flags for compiling the regular expressions. Defaults to MULTILINE."
msgstr ""

#: ../../../docstring myst_nb.core.lexers.AnsiColorLexer.name:1 of
msgid "Name of the lexer"
msgstr ""

#: myst_nb.core.lexers.AnsiColorLexer.process:1 of
msgid "Produce the next token and bit of text."
msgstr ""

#: myst_nb.core.lexers.AnsiColorLexer.process:3 of
msgid ""
"Interprets the ANSI code (which may be a color code or some other code), "
"changing the lexer state and producing a new token. If it's not a color "
"code, we just strip it out and move on."
msgstr ""

#: myst_nb.core.lexers.AnsiColorLexer.process:7 of
msgid "Some useful reference for ANSI codes:"
msgstr ""

#: myst_nb.core.lexers.AnsiColorLexer.process:8 of
msgid "http://ascii-table.com/ansi-escape-sequences.php"
msgstr ""

#: ../../../docstring myst_nb.core.lexers.AnsiColorLexer.tokens:1 of
msgid ""
"At all time there is a stack of states. Initially, the stack contains a "
"single state 'root'. The top of the stack is called \"the current "
"state\"."
msgstr ""

#: ../../../docstring myst_nb.core.lexers.AnsiColorLexer.tokens:4 of
msgid "Dict of ``{'state': [(regex, tokentype, new_state), ...], ...}``"
msgstr ""

#: ../../../docstring myst_nb.core.lexers.AnsiColorLexer.tokens:6 of
msgid ""
"``new_state`` can be omitted to signify no state transition. If "
"``new_state`` is a string, it is pushed on the stack. This ensure the new"
" current state is ``new_state``. If ``new_state`` is a tuple of strings, "
"all of those strings are pushed on the stack and the current state will "
"be the last element of the list. ``new_state`` can also be "
"``combined('state1', 'state2', ...)`` to signify a new, anonymous state "
"combined from the rules of two or more existing ones. Furthermore, it can"
" be '#pop' to signify going back one step in the state stack, or '#push' "
"to push the current state on the stack again. Note that if you push while"
" in a combined state, the combined state itself is pushed, and not only "
"the state in which the rule is defined."
msgstr ""

#: ../../../docstring myst_nb.core.lexers.AnsiColorLexer.tokens:20 of
msgid ""
"The tuple can also be replaced with ``include('state')``, in which case "
"the rules from the state named by the string are included in the current "
"one."
msgstr ""

#: ../../reference/api.rst:90
msgid "Loggers"
msgstr ""

#: myst_nb.core.loggers.DocutilsDocLogger:1
#: myst_nb.core.loggers.SphinxDocLogger:1 of
msgid "基类：:py:class:`logging.LoggerAdapter`"
msgstr ""

#: myst_nb.core.loggers.DocutilsDocLogger:1 of
msgid "A logger which routes messages to the docutils document reporter."
msgstr ""

#: myst_nb.core.loggers.DocutilsDocLogger:3 of
msgid ""
"The document path and message type are automatically included in the "
"message, and ``line`` is allowed as a keyword argument. The standard "
"sphinx logger keywords are allowed but ignored: ``subtype``, ``color``, "
"``once``, ``nonl``."
msgstr ""

#: myst_nb.core.loggers.DocutilsDocLogger:8 of
msgid "``type.subtype`` are also appended to the end of messages."
msgstr ""

#: myst_nb.core.loggers.DocutilsDocLogger.process:1
#: myst_nb.core.loggers.SphinxDocLogger.process:1 of
msgid ""
"Process the logging message and keyword arguments passed in to a logging "
"call to insert contextual information. You can either manipulate the "
"message itself, the keyword args or both. Return the message and kwargs "
"modified (or not) to suit your needs."
msgstr ""

#: myst_nb.core.loggers.DocutilsDocLogger.process:6
#: myst_nb.core.loggers.SphinxDocLogger.process:6 of
msgid ""
"Normally, you'll only need to override this one method in a LoggerAdapter"
" subclass for your specific needs."
msgstr ""

#: myst_nb.core.loggers.SphinxDocLogger:1 of
msgid ""
"Wraps a Sphinx logger, which routes messages to the docutils document "
"reporter."
msgstr ""

#: myst_nb.core.loggers.SphinxDocLogger:3 of
msgid ""
"The document path and message type are automatically included in the "
"message, and ``line`` is allowed as a keyword argument, as well as the "
"standard sphinx logger keywords: ``subtype``, ``color``, ``once``, "
"``nonl``."
msgstr ""

#: myst_nb.core.loggers.SphinxDocLogger:8 of
msgid ""
"As per the sphinx logger, warnings are suppressed, if their "
"``type.subtype`` are included in the ``suppress_warnings`` configuration."
" These are also appended to the end of messages."
msgstr ""

